# Copyright 1994-2013 The MathWorks, Inc.
#
# File    : ard_linaro.tmf   
#
# Abstract:
#	Template makefile for building a PC-based stand-alone Parrot AR Drone
#       2.0 real-time version of Simulink model using generated C code and
#       Linaro compiler Version 4.8
#
# 	This makefile attempts to conform to the guidelines specified in the
# 	IEEE Std 1003.2-1992 (POSIX) standard. It is designed to be used
#       with GNU Make (gmake) which is located in matlabroot/bin/win32.
#
# 	Note that this template is automatically customized by the build 
#       procedure to create "<model>.mk"
#
#       The following defines can be used to modify the behavior of the
#	build:
#	  OPT_OPTS       - Optimization options. Default is none. To enable
#                          debugging specify as OPT_OPTS=-g4.
#	  OPTS           - User specific compile options.
#	  USER_SRCS      - Additional user sources, such as files needed by
#			   S-functions.
#	  USER_INCLUDES  - Additional include paths
#			   (i.e. USER_INCLUDES="-Iwhere-ever -Iwhere-ever2")
#			   (For Lcc, have a '/'as file seperator before the
#			   file name instead of a '\' .
#			   i.e.,  d:\work\proj1/myfile.c - reqd for 'gmake')
#
#       This template makefile is designed to be used with a system target
#       file that contains 'rtwgensettings.BuildDirSuffix' see ard.tlc

#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the build procedure (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.

MAKECMD         = "%MATLAB%\bin\win32\gmake"
SHELL           = cmd
HOST            = PC
BUILD           = yes
SYS_TARGET_FILE = ard.tlc
BUILD_SUCCESS	= *** Created
BUILD_INFO      = *** Info:
COMPILER_TOOL_CHAIN = linaro


MAKEFILE_FILESEP = /


#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# build procedure.
#
#  MODEL_NAME          - Name of the Simulink block diagram
#  MODEL_MODULES       - Any additional generated source modules
#  MAKEFILE_NAME       - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT         - Path to where MATLAB is installed.
#  MATLAB_BIN          - Path to MATLAB executable.
#  S_FUNCTIONS         - List of S-functions.
#  S_FUNCTIONS_LIB     - List of S-functions libraries to link.
#  NUMST               - Number of sample times
#  TID01EQ             - yes (1) or no (0): Are sampling rates of continuous task
#                        (tid=0) and 1st discrete task equal.
#  NCSTATES            - Number of continuous states
#  BUILDARGS           - Options passed in at the command line.
#  MULTITASKING        - yes (1) or no (0): Is solver mode multitasking
#  MAT_FILE            - yes (1) or no (0): Should mat file logging be done
#  EXT_MODE            - yes (1) or no (0): Build for external mode
#  TMW_EXTMODE_TESTING - yes (1) or no (0): Build ext_test.c for external mode
#                        testing.
#  EXTMODE_TRANSPORT   - Index of transport mechanism (e.g. tcpip, serial) for extmode
#  EXTMODE_STATIC      - yes (1) or no (0): Use static instead of dynamic mem alloc.
#  EXTMODE_STATIC_SIZE - Size of static memory allocation buffer.
#  LINARO_ROOT         - Path to where Linaro toolchain is installed


MODEL                = |>MODEL_NAME<|
MODULES              = |>MODEL_MODULES<|
MAKEFILE             = |>MAKEFILE_NAME<|
MATLAB_ROOT          = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT      = |>ALT_MATLAB_ROOT<|
MATLAB_BIN           = |>MATLAB_BIN<|
ALT_MATLAB_BIN       = |>ALT_MATLAB_BIN<|
MASTER_ANCHOR_DIR    = |>MASTER_ANCHOR_DIR<|
START_DIR            = |>START_DIR<|
S_FUNCTIONS          = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB      = |>S_FUNCTIONS_LIB<|
NUMST                = |>NUMST<|
TID01EQ              = |>TID01EQ<|
NCSTATES             = |>NCSTATES<|
BUILDARGS            = |>BUILDARGS<|
MULTITASKING         = |>MULTITASKING<|
MAT_FILE             = |>MAT_FILE<|
EXT_MODE             = |>EXT_MODE<|
TMW_EXTMODE_TESTING  = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT    = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC       = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE  = |>EXTMODE_STATIC_ALLOC_SIZE<|

#LINARO_ROOT          = c:/matlab/ardrone/Linaro-Toolchain-v4.8
LINARO_ROOT          = C:\MATLAB\SupportPackages\R2014b\Linaro-Toolchain-v4.8

CLASSIC_INTERFACE    = |>CLASSIC_INTERFACE<|
# Optional for GRT
ALLOCATIONFCN        = |>GENERATE_ALLOC_FCN<|
ONESTEPFCN           = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN              = 1
MULTI_INSTANCE_CODE  = |>MULTI_INSTANCE_CODE<|

MODELREFS            = |>MODELREFS<|
SHARED_SRC           = |>SHARED_SRC<|
SHARED_SRC_DIR       = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR       = |>SHARED_BIN_DIR<|
SHARED_LIB           = |>SHARED_LIB<|
OPTIMIZATION_FLAGS   = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS   = -pthread

#--------------------------- Model and reference models -----------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_LINK_RSPFILE     = |>MODELREF_LINK_RSPFILE_NAME<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
RELATIVE_PATH_TO_C_LIB    = c:/matlab/ardrone/c_library
# NONE: standalone, SIM: modelref sim, RTW: modelref coder target
MODELREF_TARGET_TYPE       = |>MODELREF_TARGET_TYPE<|

#-- In the case when directory name contains space ---
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif
ifneq ($(MATLAB_BIN),$(ALT_MATLAB_BIN))
MATLAB_BIN := $(ALT_MATLAB_BIN)
endif

#--------------------------- Tool Specifications ------------------------------

#LINARO = $(LINARO_ROOT)\arm-linux-gnueabihf
LINARO = $(LINARO_ROOT)
#LCC = $(MATLAB_ROOT)\sys\lcc
#include $(MATLAB_ROOT)\rtw\c\tools\lcctools.mak

# Setup Linaro tools for gmake.

CC     = $(LINARO)\bin\arm-linux-gnueabihf-g++.exe
LD     = $(LINARO)\bin\arm-linux-gnueabihf-g++.exe
LIB    = $(LINARO)\bin\arm-linux-gnueabihf-g++.exe
LIBCMD = $(LINARO)\bin\arm-linux-gnueabihf-g++.exe
#BUILDLIB = $(LINARO)\bin\buildlib

PERL   = $(MATLAB_ROOT)\sys\perl\win32\bin\perl

DEFAULT_OPT_OPTS = 

#------------------------------------#
# Setup INCLUDES, DSP_MEX source dir #
#------------------------------------#

MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/libsrc \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/tcpip \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/serial \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/custom

# DSP Blockset non-TLC S-fcn source path
# and additional file include paths
DSP_MEX      = $(MATLAB_ROOT)\toolbox\dspblks\dspmex
DSP_SIM      = $(MATLAB_ROOT)\toolbox\dspblks\src\sim
DSP_RT       = $(MATLAB_ROOT)\toolbox\dspblks\src\rt
DSP_INCLUDES = \
	-I$(DSP_SIM) \
	-I$(DSP_RT)

BLOCKSET_INCLUDES = $(DSP_INCLUDES) \
                   -I$(MATLAB_ROOT)\toolbox\commblks\commmex

COMPILER_INCLUDES = -I$(LINARO)\include

INCLUDES = -I. -I.. $(MATLAB_INCLUDES) $(BLOCKSET_INCLUDES) \
           $(COMPILER_INCLUDES) $(USER_INCLUDES)




#----------------------------- External mode -----------------------------------

# Uncomment -DVERBOSE to have information printed to stdout
# To add a new transport layer, see the comments in
#   <matlabroot>/toolbox/simulink/simulink/extmode_transports.m
ifeq ($(EXT_MODE),1)
  EXT_CC_OPTS = -DEXT_MODE -DWIN32 -fpermissive # -DVERBOSE
  ifeq ($(EXTMODE_TRANSPORT),0) #tcpip
    EXT_SRC = ext_svr.c updown.c ext_work.c rtiostream_interface.c rtiostream_tcpip.c
    EXT_LIB = $(MATLAB_ROOT)\sys\lcc\lib\wsock32.lib
  endif
  ifeq ($(EXTMODE_TRANSPORT),1) #serial_win32
    EXT_SRC  = ext_svr.c updown.c ext_work.c ext_svr_serial_transport.c
    EXT_SRC += ext_serial_pkt.c rtiostream_serial_interface.c rtiostream_serial.c
  endif
  ifeq ($(TMW_EXTMODE_TESTING),1)
    EXT_SRC     += ext_test.c
    EXT_CC_OPTS += -DTMW_EXTMODE_TESTING
  endif
  ifeq ($(EXTMODE_STATIC),1)
    EXT_SRC     += mem_mgr.c
    EXT_CC_OPTS += -DEXTMODE_STATIC -DEXTMODE_STATIC_SIZE=$(EXTMODE_STATIC_SIZE)
  endif
endif

#------------------------------ Include Path ----------------------------------

# see MATLAB_INCLUDES and COMPILER_INCLUDES from lcctools.mak

ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR) $(MATLAB_INCLUDES) $(ADD_INCLUDES) \
           $(COMPILER_INCLUDES) $(USER_INCLUDES) $(MODELREF_INC_PATH) $(SHARED_INCLUDES)

#------------------------ rtModel ----------------------------------------------
RTM_CC_OPTS = -DUSE_RTMODEL

#-------------------------------- C Flags --------------------------------------

# Optimization Options
OPT_OPTS = $(DEFAULT_OPT_OPTS)

# General User Options
OPTS =

# Compiler options, etc:
ifneq ($(OPTIMIZATION_FLAGS),)
CC_OPTS = $(OPTS) $(ANSI_OPTS) $(EXT_CC_OPTS) $(RTM_CC_OPTS) $(OPTIMIZATION_FLAGS)
else
CC_OPTS = $(OPT_OPTS) $(OPTS) $(ANSI_OPTS) $(EXT_CC_OPTS) $(RTM_CC_OPTS)
endif

CPP_REQ_DEFINES = -DMODEL=$(MODEL) -DRT -DNUMST=$(NUMST) \
                  -DTID01EQ=$(TID01EQ) -DNCSTATES=$(NCSTATES) \
                  -DMT=$(MULTITASKING) -DHAVESTDIO -DMAT_FILE=$(MAT_FILE) \
		  -DONESTEPFCN=$(ONESTEPFCN) -DTERMFCN=$(TERMFCN) \
		  -DMULTI_INSTANCE_CODE=$(MULTI_INSTANCE_CODE) \
		  -DCLASSIC_INTERFACE=$(CLASSIC_INTERFACE) \
		  -DALLOCATIONFCN=$(ALLOCATIONFCN)

ARCH_FLAGS = -marm -march=armv4t -mfloat-abi=soft

CFLAGS = $(ARCH_FLAGS) $(CC_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES)

ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LDFLAGS = -s -L$(LIB)
else
LDFLAGS = -L$(LIB)
endif


#------------------------- Additional Libraries -------------------------------

LIBS =
|>START_PRECOMP_LIBRARIES<|
ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LIBS += |>EXPAND_LIBRARY_LOCATION<|\|>EXPAND_LIBRARY_NAME<|_lcc.lib
else
LIBS += |>EXPAND_LIBRARY_NAME<|.lib
endif |>END_PRECOMP_LIBRARIES<|
|>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.lib |>END_EXPAND_LIBRARIES<|
LIBS += $(EXT_LIB) $(S_FUNCTIONS_LIB)

CUSTOM_CFILES = $(RELATIVE_PATH_TO_ANCHOR)/mot.c
CUSTOM_OFILES = mot.o motorboard.o util.o gpio.o navboard.o navcontrol.o vbat.o vbatcontrol.o
CUSTOM_ADDITIONAL_LDFLAGS = -pthread

#----------------------------- Source Files ------------------------------------

PRODUCTNAME = $(MODEL).ard

#$(CUSTOMLIBS): %.o: %.c
#    $(CC) $(ARCH_FLAGS) -c $(CUSTOM_CFILES) $(CUSTOM_ADDITIONAL_LDFLAGS) -o $(CUSTOMLIBS)

ifeq ($(MODELREF_TARGET_TYPE), NONE)
    PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(PRODUCTNAME)
    MOTO               = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/mot.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o mot.o
    MOTORBOARDO        = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/motorboard.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o motorboard.o
    UTILO              = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/util.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o util.o
    GPIOO              = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/gpio.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o gpio.o
    NAVBOARDO          = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/navboard.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o navboard.o
    NAVCONTROLO        = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/navcontrol.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o navcontrol.o
    VBATO              = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/vbat.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o vbat.o
    VBATCONTROLO       = $(CC) $(ARCH_FLAGS) -c $(RELATIVE_PATH_TO_C_LIB)/vbatcontrol.c $(CUSTOM_ADDITIONAL_LDFLAGS) -o vbatcontrol.o
    BIN_SETTING        = $(LD) $(LDFLAGS) $(ARCH_FLAGS) $(ADDITIONAL_LDFLAGS) $(CUSTOMLIBS) -o $(PRODUCT) $(CUSTOM_OFILES) $(SYSLIBS)
    BUILD_PRODUCT_TYPE = executable
   ifeq ($(CLASSIC_INTERFACE), 1)
MAIN_SRC  = classic_main.c
OTHER_SRC = rt_sim.c
    else
      ifeq ($(MULTI_INSTANCE_CODE), 1)
MAIN_SRC  = rt_malloc_main.c
      else
MAIN_SRC  = rt_main.c
      endif
OTHER_SRC =
    endif
REQ_SRCS           = $(MODEL).c $(MODULES) $(EXT_SRC) $(MAIN_SRC) $(OTHER_SRC) 
else
    # Model reference coder target
    PRODUCT  = $(MODELLIB)
    REQ_SRCS = $(MODULES)
endif

USER_SRCS =

USER_OBJS       = $(USER_SRCS:.c=.o)
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))

SRCS      = $(REQ_SRCS) $(S_FUNCTIONS)
OBJS      = $(SRCS:.c=.o)  $(USER_OBJS)
LINK_OBJS = $(SRCS:.c=.o) $(LOCAL_USER_OBJS)

SHARED_OBJS := $(addsuffix .o, $(basename $(wildcard $(SHARED_SRC))))
FMT_SHARED_OBJS = $(subst /,\,$(SHARED_OBJS))

#--------------------------------- Rules ---------------------------------------

ifeq ($(MODELREF_TARGET_TYPE),NONE)
$(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) $(MODELREF_LINK_LIBS) 
	@cmd /C "echo $(BUILD_INFO) Started compiling required AR Drone library files" 
	$(MOTO)
	$(MOTORBOARDO)
	$(UTILO)
	$(GPIOO)
	$(NAVBOARDO)
	$(NAVCONTROLO)
	$(VBATO)
	$(VBATCONTROLO)
	@cmd /C "echo $(BUILD_INFO) Started linking $(PRODUCTNAME)" 
	$(BIN_SETTING) $(LINK_OBJS) @$(MODELREF_LINK_RSPFILE) $(SHARED_LIB) $(LIBS) 
	@cmd /C "echo $(BUILD_SUCCESS) executable: $(PRODUCTNAME)"
else

$(PRODUCT) : $(OBJS) $(SHARED_LIB) 
	@cmd /C "echo $(BUILD_INFO) Started compiling $(PRODUCTNAME)"
	$(LIBCMD) /out:$(MODELLIB) $(LINK_OBJS)
	@cmd /C "echo $(BUILD_SUCCESS) static library $(MODELLIB)"
endif

%.o : %.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : %.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.c
	$(CC) -c -Fo$(@F) -I$(RELATIVE_PATH_TO_ANCHOR)/$(<F:.c=cn_rtw) $(CFLAGS)  $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.C
	$(CC) -c -Fo$(@F) -I$(RELATIVE_PATH_TO_ANCHOR)/$(<F:.c=cn_rtw) $(CFLAGS)  $<

ifeq ($(CLASSIC_INTERFACE), 1)
%.o : $(MATLAB_ROOT)/rtw/c/grt/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/grt/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<
else
%.o : $(MATLAB_ROOT)/rtw/c/src/common/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/common/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<
endif

%.o : $(MATLAB_ROOT)/rtw/c/src/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/common/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/rtiostream/rtiostreamtcpip/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/tcpip/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/serial/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/serial/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

|>END_EXPAND_RULES<|

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

|>END_EXPAND_RULES<|

%.o : $(MATLAB_ROOT)/simulink/src/%.c
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/simulink/src/%.C
	$(CC) -c -Fo$(@F) $(CFLAGS) $<

# Libraries:

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|	|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.lib :  $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### Creating $@"
	@if exist $@ del $@
	$(LIBCMD) /out:$@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### $@ Created"

|>END_EXPAND_LIBRARIES<|

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|	|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.lib : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### Creating $@"
	@if exist $@ del $@
	$(LIBCMD) /out:$@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### $@ Created"

|>END_PRECOMP_LIBRARIES<|

#----------------------------- Dependencies ------------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_OBJS) : $(SHARED_BIN_DIR)/%.o : $(SHARED_SRC_DIR)/%.c 
	$(CC) -c -Fo$@ $(CFLAGS) $<

$(SHARED_LIB) : $(SHARED_OBJS)
	@cmd /C "echo ### Creating $@" 
	$(LIBCMD) /out:$@ $(FMT_SHARED_OBJS)
	@cmd /C "echo ### $@ Created"

#--------- Miscellaneous rules to purge, clean and lint (sol2 only) ------------

purge : clean
	@cmd /C "echo ### Deleting the generated source code for $(MODEL)"
	@del $(MODEL).c $(MODEL).h $(MODEL)_types.h $(MODEL)_data.c \
	        $(MODEL)_private.h $(MODEL).rtw $(MODULES) rtw_proj.tmw $(MAKEFILE)

clean :
	@cmd /C "echo ### Deleting the objects and $(PROGRAM)"
	@del $(LINK_OBJS) ..\$(PRODUCTNAME)
|>START_EXPAND_LIBRARIES<|	@del |>EXPAND_LIBRARY_NAME<|.lib
|>END_EXPAND_LIBRARIES<|
|>START_PRECOMP_LIBRARIES<|	@del |>EXPAND_LIBRARY_NAME<|.lib
|>END_PRECOMP_LIBRARIES<|

# EOF: ard_linaro.tmf
